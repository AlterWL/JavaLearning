/* 
    关于java语言中的整数型：

        数据类型            空间大小            默认值          取值范围
    ---------------------------------------------------------------------
        byte                1字节               0             [-128 ~ 127]
        short               2字节               0             [-32768 ~ 32767]
        int                 4字节               0             [-2147483648 ~ 2147483647]
        long                8字节               0L
    
    1、java语言中整数型字面值默认被当做int型处理，若要让整数型字面值被当成long类型处理的话，需要在其后面添加l/L,建议使用大写
    2、java语言中的整数型字面值有三种表示方式：
        (1) 十进制【缺省方式】
        (2) 八进制【以0开始】
        (3) 十六进制【以0x开始】
 */

 public class DataTypeInteger
 {
    public static void main(String[] args)
    {
        int a = 10;  // 十进制
        int b = 010;  // 八进制
        int c = 0x10;  // 十六进制

        // 全部以十进制的方式输出
        System.out.println(a);  // 10
        System.out.println(b);  // 8
        System.out.println(c);  //16

        // 123这个整数型字面值是int类型【默认】，i变量被声明时为int类型
        // int类型的123赋值给int类型的变量i，不存在类型转换
        int i = 123;
        System.out.println(i);

        // 456为int类型【默认】- 4字节，x变量被声明为long类型 - 8字节
        // int类型的456赋值给int类型的变量x，存在类型转换
        // 小容量可以自动转换为大容量，称为自动类型转换机制
        long x = 456;
        System.out.println(x);

        // 正常执行
        long y = 2147483647;
        System.out.println(y);

        // 编译错误: 整数太大
        // 2147483648被当成int型【4字节】字面值处理，但该值超出了int型所能表示的范围
        // long z = 2147483648;

        long z = 2147483648L;  // 2147483648L是long类型【8字节】
        System.out.println(z);

        long p = 100L;  // 不存在类型转换，直接赋值
        // 大容量类型数据不能直接赋值给小容量变量
        // int q = p;  // 编译错误：不兼容的类型: 从long转换到int可能会有损失


        // 大容量转换为小容量需要进行强制类型转换，通过添加“强制类型转换符”实现
        // 强制类型转换后可以通过编译，但在运行阶段可能损失精度，可能会造成严重损失
        // 故此应谨慎使用强制类型转换
        // 强转原理：
            // 转换前：00000000 00000000 00000000 00000000 00000000 00000000 00000000 01100100
            // 转换后：00000000 00000000 00000000 01100100
            // 即是说，将左边的高位二进制位砍掉【所有的数据强制转换都是这样完成的】
        int q = (int)p;
        System.out.println(q);

        // 转换前：00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000
        long k = 2147483648L;
        // 转换后：10000000 00000000 00000000 00000000 【计算机都采用补码形式存储数据】
        int j = (int)k;
        System.out.println(j);  // -2147483648

        // 当一个整数字面值没有超出byte、short、char类型的范围时，可以直接赋值给对应类型的变量
        // 这么做是为了方便编程

        // 按理说，以下赋值语句没有添加强制转换符，会编译报错。但是编译通过了。
        // java语言中，当一个整数字面值的大小没有超出byte类型的取值范围时，可以直接赋值给byte型变量
        byte m = 98;
        m = 127;
        // m = 128;  // 编译报错：从int转换到byte可能会有损失
        System.out.println(m);
        
        // 同理，不超出short类型范围，可直接赋值
        short s = 32767;
        // s = 32768;  // 编译错误：不兼容的类型: 从int转换到short可能会有损失
        System.out.println(s);

        // 同理，不超出char类型范围，可直接赋值
        char cc = 65535;
        // cc = 65536;  // 编译错误: 不兼容的类型: 从int转换到char可能会有损失
        System.out.println(cc);
    }
 }
