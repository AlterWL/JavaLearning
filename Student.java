/* 
    封装；

        对于该程序，Student类的age属性可以被外部程序随意访问，很不安全【如可能被修改为负数，而年龄不可能为负数，但是这样程序运行时并不会报错】，所以这样直接暴露类属性的程序存在缺陷。
        
        - 封装的好处：
            * 封装复杂的处理过程，对外部提供简单的操作接口，对使用者不需要关心内部实现原理就可以直接使用【如照相机、电视机】，封装之后才形成了真正的独立体，即“对象”；
            * 封装使得适应性更强，可以在程序中重复使用；
            * 封装提高了安全性，从外部不能随意操作内部信息。
        
        - 封装的步骤：
            1. 属性私有化，使用private关键字进行修饰，私有化后的属性只能在本类中访问；
            2. 对外提供简单的操作入口，使得外部只能通过入口访问属性，即提供两个公开方法；set()和get()。
                * set方法命名规范：
                    public void set+属性名首字母大写(形参){

                    }
                * get方法命名规范：
                    public 参数类型 get+属性名首字母大写(){

                    }
                注：getter和setter方法没有static关键字修饰；
                    有static关键字修饰的方法调用：类名.方法名()；
                    没有static关键字修饰的方法调用：引用.方法名()。
        
    构造方法：
        
        - 构造方法又称为构造函数/构造器/Constructor

        - 构造方法语法结构：
            [修饰符列表] 构造方法名(形参列表){
                构造方法体;
            }
            
        - 普通方法的语法结构：
            [修饰符列表] 返回值类型 方法名(形参列表){
                方法体;
            }
        
        - 构造方法的“返回值类型”不需要指定，并且也不能写void。一旦写上“返回值类型”，该方法就成为了普通方法。

        - 构造方法名必须和类名一致。

        - 作用和意义：
            1. 创造对象；
            2. 开辟实例变量的内存空间【初始化赋值】。
                实例变量的内存空间在构造方法执行过程当中完成开辟，并完成初始化赋值，

        - 调用方式：
            * 普通方法调用方式：【有static修饰时】类名.方法名(实参列表)，【无static修饰时类名.方法名(实参列表)
            * new 构造方法(实参列表)
        
        - 返回值：构造方法执行结束时自动返回值，返回值的类型是方法所在的类本身。
    
        - 缺省构造器：
            当一个类中没有定义任何构造方法时，系统默认给该类提供一个无参数的构造方法，这个构造方法被称为缺省构造器。
            当一个类显式地将构造方法定义出来时，那么系统将不再提供缺省构造器。
            因为无参数构造方法十分常用，所以建议在开发中手动为当前类定义无参数构造方法【构造方法支持重载机制】。
            
 */
public class Student  // 定义一个类，是一个学生对象的模板
{
    // 属性-描述对象的状态信息
    // 属性通常采用变量的方式定义
    // 在类体中，方法体之外的变量称为“成员变量”，默认值向0看齐
    // 成员变量不能通过类直接访问，需要先创建对象，在通过对象去访问。因为在创建对象之后，变量才会被分配内存空间的。因此，这种成员变量又称为“实例变量”/“对象变量”、
    // 成员变量分为实例变量前面修饰符没有static】和静态变量【前面修饰符有static】

    // 实例变量
    String name;  // 姓名
    int number;  // 学号
    boolean gender;  // 性别
    private int age;  // 年龄，私有属性，不能从外部直接访问只能通过入口(setter和getter)
    String grade;  // 年级
    Computer computer;  // 学生的电脑

    // 构造方法的定义
    /**
     * Student类的构造方法【无参数】
     */
    public Student(){
        System.out.println("A new object has been created.");
    }
    /**
     * Student类的构造方法，带参数
     * @param sn - 姓名
     * @param sno - 学号
     * @param sa - 年龄
     * @param sg - 性别
     */
    public Student(String sn, int sno,int sa, boolean sg){
        name = sn;
        number = sno;
        setAge(sa);
        gender = sg;
    }

    // setter
    public void setAge(int a){
        if(age >= 0 && age < 150)  // 安全过滤，年龄不能为负数，也不能过大
            age = a;
        else
            System.out.println("年龄有误!!");
    }

    // getter
    public int getAge(){
        return age;
    }
}